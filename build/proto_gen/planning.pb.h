// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning.proto

#ifndef PROTOBUF_INCLUDED_planning_2eproto
#define PROTOBUF_INCLUDED_planning_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_planning_2eproto 

namespace protobuf_planning_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_planning_2eproto
namespace planning {
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathPoint;
class PathPointDefaultTypeInternal;
extern PathPointDefaultTypeInternal _PathPoint_default_instance_;
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
}  // namespace planning
namespace google {
namespace protobuf {
template<> ::planning::Path* Arena::CreateMaybeMessage<::planning::Path>(Arena*);
template<> ::planning::PathPoint* Arena::CreateMaybeMessage<::planning::PathPoint>(Arena*);
template<> ::planning::Trajectory* Arena::CreateMaybeMessage<::planning::Trajectory>(Arena*);
template<> ::planning::TrajectoryPoint* Arena::CreateMaybeMessage<::planning::TrajectoryPoint>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace planning {

// ===================================================================

class PathPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.PathPoint) */ {
 public:
  PathPoint();
  virtual ~PathPoint();

  PathPoint(const PathPoint& from);

  inline PathPoint& operator=(const PathPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathPoint(PathPoint&& from) noexcept
    : PathPoint() {
    *this = ::std::move(from);
  }

  inline PathPoint& operator=(PathPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPoint* internal_default_instance() {
    return reinterpret_cast<const PathPoint*>(
               &_PathPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PathPoint* other);
  friend void swap(PathPoint& a, PathPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathPoint* New() const final {
    return CreateMaybeMessage<PathPoint>(NULL);
  }

  PathPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathPoint& from);
  void MergeFrom(const PathPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string lane_id = 9;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 9;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // optional double x_m = 1;
  bool has_x_m() const;
  void clear_x_m();
  static const int kXMFieldNumber = 1;
  double x_m() const;
  void set_x_m(double value);

  // optional double y_m = 2;
  bool has_y_m() const;
  void clear_y_m();
  static const int kYMFieldNumber = 2;
  double y_m() const;
  void set_y_m(double value);

  // optional double z_m = 3;
  bool has_z_m() const;
  void clear_z_m();
  static const int kZMFieldNumber = 3;
  double z_m() const;
  void set_z_m(double value);

  // optional double theta_rad = 4;
  bool has_theta_rad() const;
  void clear_theta_rad();
  static const int kThetaRadFieldNumber = 4;
  double theta_rad() const;
  void set_theta_rad(double value);

  // optional double kappa = 5;
  bool has_kappa() const;
  void clear_kappa();
  static const int kKappaFieldNumber = 5;
  double kappa() const;
  void set_kappa(double value);

  // optional double s_m = 6;
  bool has_s_m() const;
  void clear_s_m();
  static const int kSMFieldNumber = 6;
  double s_m() const;
  void set_s_m(double value);

  // optional double dkappa = 7;
  bool has_dkappa() const;
  void clear_dkappa();
  static const int kDkappaFieldNumber = 7;
  double dkappa() const;
  void set_dkappa(double value);

  // optional double ddkappa = 8;
  bool has_ddkappa() const;
  void clear_ddkappa();
  static const int kDdkappaFieldNumber = 8;
  double ddkappa() const;
  void set_ddkappa(double value);

  // optional double x_derivative_mps = 10;
  bool has_x_derivative_mps() const;
  void clear_x_derivative_mps();
  static const int kXDerivativeMpsFieldNumber = 10;
  double x_derivative_mps() const;
  void set_x_derivative_mps(double value);

  // optional double y_derivative_mps = 11;
  bool has_y_derivative_mps() const;
  void clear_y_derivative_mps();
  static const int kYDerivativeMpsFieldNumber = 11;
  double y_derivative_mps() const;
  void set_y_derivative_mps(double value);

  // @@protoc_insertion_point(class_scope:planning.PathPoint)
 private:
  void set_has_x_m();
  void clear_has_x_m();
  void set_has_y_m();
  void clear_has_y_m();
  void set_has_z_m();
  void clear_has_z_m();
  void set_has_theta_rad();
  void clear_has_theta_rad();
  void set_has_kappa();
  void clear_has_kappa();
  void set_has_s_m();
  void clear_has_s_m();
  void set_has_dkappa();
  void clear_has_dkappa();
  void set_has_ddkappa();
  void clear_has_ddkappa();
  void set_has_lane_id();
  void clear_has_lane_id();
  void set_has_x_derivative_mps();
  void clear_has_x_derivative_mps();
  void set_has_y_derivative_mps();
  void clear_has_y_derivative_mps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double x_m_;
  double y_m_;
  double z_m_;
  double theta_rad_;
  double kappa_;
  double s_m_;
  double dkappa_;
  double ddkappa_;
  double x_derivative_mps_;
  double y_derivative_mps_;
  friend struct ::protobuf_planning_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Path : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Path* other);
  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(NULL);
  }

  Path* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning.PathPoint path_points = 2;
  int path_points_size() const;
  void clear_path_points();
  static const int kPathPointsFieldNumber = 2;
  ::planning::PathPoint* mutable_path_points(int index);
  ::google::protobuf::RepeatedPtrField< ::planning::PathPoint >*
      mutable_path_points();
  const ::planning::PathPoint& path_points(int index) const;
  ::planning::PathPoint* add_path_points();
  const ::google::protobuf::RepeatedPtrField< ::planning::PathPoint >&
      path_points() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:planning.Path)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::planning::PathPoint > path_points_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_planning_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrajectoryPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.TrajectoryPoint) */ {
 public:
  TrajectoryPoint();
  virtual ~TrajectoryPoint();

  TrajectoryPoint(const TrajectoryPoint& from);

  inline TrajectoryPoint& operator=(const TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryPoint(TrajectoryPoint&& from) noexcept
    : TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline TrajectoryPoint& operator=(TrajectoryPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint*>(
               &_TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TrajectoryPoint* other);
  friend void swap(TrajectoryPoint& a, TrajectoryPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPoint* New() const final {
    return CreateMaybeMessage<TrajectoryPoint>(NULL);
  }

  TrajectoryPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrajectoryPoint& from);
  void MergeFrom(const TrajectoryPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .planning.PathPoint path_point = 1;
  bool has_path_point() const;
  void clear_path_point();
  static const int kPathPointFieldNumber = 1;
  private:
  const ::planning::PathPoint& _internal_path_point() const;
  public:
  const ::planning::PathPoint& path_point() const;
  ::planning::PathPoint* release_path_point();
  ::planning::PathPoint* mutable_path_point();
  void set_allocated_path_point(::planning::PathPoint* path_point);

  // optional double v_mps = 2;
  bool has_v_mps() const;
  void clear_v_mps();
  static const int kVMpsFieldNumber = 2;
  double v_mps() const;
  void set_v_mps(double value);

  // optional double a_mpss = 3;
  bool has_a_mpss() const;
  void clear_a_mpss();
  static const int kAMpssFieldNumber = 3;
  double a_mpss() const;
  void set_a_mpss(double value);

  // optional double relative_time_s = 4;
  bool has_relative_time_s() const;
  void clear_relative_time_s();
  static const int kRelativeTimeSFieldNumber = 4;
  double relative_time_s() const;
  void set_relative_time_s(double value);

  // optional double da_mpsss = 5;
  bool has_da_mpsss() const;
  void clear_da_mpsss();
  static const int kDaMpsssFieldNumber = 5;
  double da_mpsss() const;
  void set_da_mpsss(double value);

  // optional double steer_deg = 6;
  bool has_steer_deg() const;
  void clear_steer_deg();
  static const int kSteerDegFieldNumber = 6;
  double steer_deg() const;
  void set_steer_deg(double value);

  // @@protoc_insertion_point(class_scope:planning.TrajectoryPoint)
 private:
  void set_has_path_point();
  void clear_has_path_point();
  void set_has_v_mps();
  void clear_has_v_mps();
  void set_has_a_mpss();
  void clear_has_a_mpss();
  void set_has_relative_time_s();
  void clear_has_relative_time_s();
  void set_has_da_mpsss();
  void clear_has_da_mpsss();
  void set_has_steer_deg();
  void clear_has_steer_deg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::planning::PathPoint* path_point_;
  double v_mps_;
  double a_mpss_;
  double relative_time_s_;
  double da_mpsss_;
  double steer_deg_;
  friend struct ::protobuf_planning_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.Trajectory) */ {
 public:
  Trajectory();
  virtual ~Trajectory();

  Trajectory(const Trajectory& from);

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Trajectory* other);
  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return CreateMaybeMessage<Trajectory>(NULL);
  }

  Trajectory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trajectory& from);
  void MergeFrom(const Trajectory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning.TrajectoryPoint trajectory_points = 2;
  int trajectory_points_size() const;
  void clear_trajectory_points();
  static const int kTrajectoryPointsFieldNumber = 2;
  ::planning::TrajectoryPoint* mutable_trajectory_points(int index);
  ::google::protobuf::RepeatedPtrField< ::planning::TrajectoryPoint >*
      mutable_trajectory_points();
  const ::planning::TrajectoryPoint& trajectory_points(int index) const;
  ::planning::TrajectoryPoint* add_trajectory_points();
  const ::google::protobuf::RepeatedPtrField< ::planning::TrajectoryPoint >&
      trajectory_points() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:planning.Trajectory)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::planning::TrajectoryPoint > trajectory_points_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_planning_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathPoint

// optional double x_m = 1;
inline bool PathPoint::has_x_m() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathPoint::set_has_x_m() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathPoint::clear_has_x_m() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathPoint::clear_x_m() {
  x_m_ = 0;
  clear_has_x_m();
}
inline double PathPoint::x_m() const {
  // @@protoc_insertion_point(field_get:planning.PathPoint.x_m)
  return x_m_;
}
inline void PathPoint::set_x_m(double value) {
  set_has_x_m();
  x_m_ = value;
  // @@protoc_insertion_point(field_set:planning.PathPoint.x_m)
}

// optional double y_m = 2;
inline bool PathPoint::has_y_m() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PathPoint::set_has_y_m() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PathPoint::clear_has_y_m() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PathPoint::clear_y_m() {
  y_m_ = 0;
  clear_has_y_m();
}
inline double PathPoint::y_m() const {
  // @@protoc_insertion_point(field_get:planning.PathPoint.y_m)
  return y_m_;
}
inline void PathPoint::set_y_m(double value) {
  set_has_y_m();
  y_m_ = value;
  // @@protoc_insertion_point(field_set:planning.PathPoint.y_m)
}

// optional double z_m = 3;
inline bool PathPoint::has_z_m() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PathPoint::set_has_z_m() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PathPoint::clear_has_z_m() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PathPoint::clear_z_m() {
  z_m_ = 0;
  clear_has_z_m();
}
inline double PathPoint::z_m() const {
  // @@protoc_insertion_point(field_get:planning.PathPoint.z_m)
  return z_m_;
}
inline void PathPoint::set_z_m(double value) {
  set_has_z_m();
  z_m_ = value;
  // @@protoc_insertion_point(field_set:planning.PathPoint.z_m)
}

// optional double theta_rad = 4;
inline bool PathPoint::has_theta_rad() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PathPoint::set_has_theta_rad() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PathPoint::clear_has_theta_rad() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PathPoint::clear_theta_rad() {
  theta_rad_ = 0;
  clear_has_theta_rad();
}
inline double PathPoint::theta_rad() const {
  // @@protoc_insertion_point(field_get:planning.PathPoint.theta_rad)
  return theta_rad_;
}
inline void PathPoint::set_theta_rad(double value) {
  set_has_theta_rad();
  theta_rad_ = value;
  // @@protoc_insertion_point(field_set:planning.PathPoint.theta_rad)
}

// optional double kappa = 5;
inline bool PathPoint::has_kappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PathPoint::set_has_kappa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PathPoint::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PathPoint::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
inline double PathPoint::kappa() const {
  // @@protoc_insertion_point(field_get:planning.PathPoint.kappa)
  return kappa_;
}
inline void PathPoint::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:planning.PathPoint.kappa)
}

// optional double s_m = 6;
inline bool PathPoint::has_s_m() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PathPoint::set_has_s_m() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PathPoint::clear_has_s_m() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PathPoint::clear_s_m() {
  s_m_ = 0;
  clear_has_s_m();
}
inline double PathPoint::s_m() const {
  // @@protoc_insertion_point(field_get:planning.PathPoint.s_m)
  return s_m_;
}
inline void PathPoint::set_s_m(double value) {
  set_has_s_m();
  s_m_ = value;
  // @@protoc_insertion_point(field_set:planning.PathPoint.s_m)
}

// optional double dkappa = 7;
inline bool PathPoint::has_dkappa() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PathPoint::set_has_dkappa() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PathPoint::clear_has_dkappa() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PathPoint::clear_dkappa() {
  dkappa_ = 0;
  clear_has_dkappa();
}
inline double PathPoint::dkappa() const {
  // @@protoc_insertion_point(field_get:planning.PathPoint.dkappa)
  return dkappa_;
}
inline void PathPoint::set_dkappa(double value) {
  set_has_dkappa();
  dkappa_ = value;
  // @@protoc_insertion_point(field_set:planning.PathPoint.dkappa)
}

// optional double ddkappa = 8;
inline bool PathPoint::has_ddkappa() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PathPoint::set_has_ddkappa() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PathPoint::clear_has_ddkappa() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PathPoint::clear_ddkappa() {
  ddkappa_ = 0;
  clear_has_ddkappa();
}
inline double PathPoint::ddkappa() const {
  // @@protoc_insertion_point(field_get:planning.PathPoint.ddkappa)
  return ddkappa_;
}
inline void PathPoint::set_ddkappa(double value) {
  set_has_ddkappa();
  ddkappa_ = value;
  // @@protoc_insertion_point(field_set:planning.PathPoint.ddkappa)
}

// optional string lane_id = 9;
inline bool PathPoint::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathPoint::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathPoint::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathPoint::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
inline const ::std::string& PathPoint::lane_id() const {
  // @@protoc_insertion_point(field_get:planning.PathPoint.lane_id)
  return lane_id_.GetNoArena();
}
inline void PathPoint::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning.PathPoint.lane_id)
}
#if LANG_CXX11
inline void PathPoint::set_lane_id(::std::string&& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning.PathPoint.lane_id)
}
#endif
inline void PathPoint::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning.PathPoint.lane_id)
}
inline void PathPoint::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning.PathPoint.lane_id)
}
inline ::std::string* PathPoint::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:planning.PathPoint.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PathPoint::release_lane_id() {
  // @@protoc_insertion_point(field_release:planning.PathPoint.lane_id)
  if (!has_lane_id()) {
    return NULL;
  }
  clear_has_lane_id();
  return lane_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PathPoint::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:planning.PathPoint.lane_id)
}

// optional double x_derivative_mps = 10;
inline bool PathPoint::has_x_derivative_mps() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PathPoint::set_has_x_derivative_mps() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PathPoint::clear_has_x_derivative_mps() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PathPoint::clear_x_derivative_mps() {
  x_derivative_mps_ = 0;
  clear_has_x_derivative_mps();
}
inline double PathPoint::x_derivative_mps() const {
  // @@protoc_insertion_point(field_get:planning.PathPoint.x_derivative_mps)
  return x_derivative_mps_;
}
inline void PathPoint::set_x_derivative_mps(double value) {
  set_has_x_derivative_mps();
  x_derivative_mps_ = value;
  // @@protoc_insertion_point(field_set:planning.PathPoint.x_derivative_mps)
}

// optional double y_derivative_mps = 11;
inline bool PathPoint::has_y_derivative_mps() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PathPoint::set_has_y_derivative_mps() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PathPoint::clear_has_y_derivative_mps() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PathPoint::clear_y_derivative_mps() {
  y_derivative_mps_ = 0;
  clear_has_y_derivative_mps();
}
inline double PathPoint::y_derivative_mps() const {
  // @@protoc_insertion_point(field_get:planning.PathPoint.y_derivative_mps)
  return y_derivative_mps_;
}
inline void PathPoint::set_y_derivative_mps(double value) {
  set_has_y_derivative_mps();
  y_derivative_mps_ = value;
  // @@protoc_insertion_point(field_set:planning.PathPoint.y_derivative_mps)
}

// -------------------------------------------------------------------

// Path

// optional string name = 1;
inline bool Path::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Path::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Path::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Path::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Path::name() const {
  // @@protoc_insertion_point(field_get:planning.Path.name)
  return name_.GetNoArena();
}
inline void Path::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning.Path.name)
}
#if LANG_CXX11
inline void Path::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning.Path.name)
}
#endif
inline void Path::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning.Path.name)
}
inline void Path::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning.Path.name)
}
inline ::std::string* Path::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:planning.Path.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_name() {
  // @@protoc_insertion_point(field_release:planning.Path.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:planning.Path.name)
}

// repeated .planning.PathPoint path_points = 2;
inline int Path::path_points_size() const {
  return path_points_.size();
}
inline void Path::clear_path_points() {
  path_points_.Clear();
}
inline ::planning::PathPoint* Path::mutable_path_points(int index) {
  // @@protoc_insertion_point(field_mutable:planning.Path.path_points)
  return path_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::planning::PathPoint >*
Path::mutable_path_points() {
  // @@protoc_insertion_point(field_mutable_list:planning.Path.path_points)
  return &path_points_;
}
inline const ::planning::PathPoint& Path::path_points(int index) const {
  // @@protoc_insertion_point(field_get:planning.Path.path_points)
  return path_points_.Get(index);
}
inline ::planning::PathPoint* Path::add_path_points() {
  // @@protoc_insertion_point(field_add:planning.Path.path_points)
  return path_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::planning::PathPoint >&
Path::path_points() const {
  // @@protoc_insertion_point(field_list:planning.Path.path_points)
  return path_points_;
}

// -------------------------------------------------------------------

// TrajectoryPoint

// optional .planning.PathPoint path_point = 1;
inline bool TrajectoryPoint::has_path_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryPoint::set_has_path_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryPoint::clear_has_path_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryPoint::clear_path_point() {
  if (path_point_ != NULL) path_point_->Clear();
  clear_has_path_point();
}
inline const ::planning::PathPoint& TrajectoryPoint::_internal_path_point() const {
  return *path_point_;
}
inline const ::planning::PathPoint& TrajectoryPoint::path_point() const {
  const ::planning::PathPoint* p = path_point_;
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.path_point)
  return p != NULL ? *p : *reinterpret_cast<const ::planning::PathPoint*>(
      &::planning::_PathPoint_default_instance_);
}
inline ::planning::PathPoint* TrajectoryPoint::release_path_point() {
  // @@protoc_insertion_point(field_release:planning.TrajectoryPoint.path_point)
  clear_has_path_point();
  ::planning::PathPoint* temp = path_point_;
  path_point_ = NULL;
  return temp;
}
inline ::planning::PathPoint* TrajectoryPoint::mutable_path_point() {
  set_has_path_point();
  if (path_point_ == NULL) {
    auto* p = CreateMaybeMessage<::planning::PathPoint>(GetArenaNoVirtual());
    path_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.TrajectoryPoint.path_point)
  return path_point_;
}
inline void TrajectoryPoint::set_allocated_path_point(::planning::PathPoint* path_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete path_point_;
  }
  if (path_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path_point, submessage_arena);
    }
    set_has_path_point();
  } else {
    clear_has_path_point();
  }
  path_point_ = path_point;
  // @@protoc_insertion_point(field_set_allocated:planning.TrajectoryPoint.path_point)
}

// optional double v_mps = 2;
inline bool TrajectoryPoint::has_v_mps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryPoint::set_has_v_mps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryPoint::clear_has_v_mps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryPoint::clear_v_mps() {
  v_mps_ = 0;
  clear_has_v_mps();
}
inline double TrajectoryPoint::v_mps() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.v_mps)
  return v_mps_;
}
inline void TrajectoryPoint::set_v_mps(double value) {
  set_has_v_mps();
  v_mps_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.v_mps)
}

// optional double a_mpss = 3;
inline bool TrajectoryPoint::has_a_mpss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryPoint::set_has_a_mpss() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryPoint::clear_has_a_mpss() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryPoint::clear_a_mpss() {
  a_mpss_ = 0;
  clear_has_a_mpss();
}
inline double TrajectoryPoint::a_mpss() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.a_mpss)
  return a_mpss_;
}
inline void TrajectoryPoint::set_a_mpss(double value) {
  set_has_a_mpss();
  a_mpss_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.a_mpss)
}

// optional double relative_time_s = 4;
inline bool TrajectoryPoint::has_relative_time_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryPoint::set_has_relative_time_s() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectoryPoint::clear_has_relative_time_s() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectoryPoint::clear_relative_time_s() {
  relative_time_s_ = 0;
  clear_has_relative_time_s();
}
inline double TrajectoryPoint::relative_time_s() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.relative_time_s)
  return relative_time_s_;
}
inline void TrajectoryPoint::set_relative_time_s(double value) {
  set_has_relative_time_s();
  relative_time_s_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.relative_time_s)
}

// optional double da_mpsss = 5;
inline bool TrajectoryPoint::has_da_mpsss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryPoint::set_has_da_mpsss() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectoryPoint::clear_has_da_mpsss() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectoryPoint::clear_da_mpsss() {
  da_mpsss_ = 0;
  clear_has_da_mpsss();
}
inline double TrajectoryPoint::da_mpsss() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.da_mpsss)
  return da_mpsss_;
}
inline void TrajectoryPoint::set_da_mpsss(double value) {
  set_has_da_mpsss();
  da_mpsss_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.da_mpsss)
}

// optional double steer_deg = 6;
inline bool TrajectoryPoint::has_steer_deg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrajectoryPoint::set_has_steer_deg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrajectoryPoint::clear_has_steer_deg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrajectoryPoint::clear_steer_deg() {
  steer_deg_ = 0;
  clear_has_steer_deg();
}
inline double TrajectoryPoint::steer_deg() const {
  // @@protoc_insertion_point(field_get:planning.TrajectoryPoint.steer_deg)
  return steer_deg_;
}
inline void TrajectoryPoint::set_steer_deg(double value) {
  set_has_steer_deg();
  steer_deg_ = value;
  // @@protoc_insertion_point(field_set:planning.TrajectoryPoint.steer_deg)
}

// -------------------------------------------------------------------

// Trajectory

// optional string name = 1;
inline bool Trajectory::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trajectory::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trajectory::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trajectory::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Trajectory::name() const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.name)
  return name_.GetNoArena();
}
inline void Trajectory::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning.Trajectory.name)
}
#if LANG_CXX11
inline void Trajectory::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning.Trajectory.name)
}
#endif
inline void Trajectory::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning.Trajectory.name)
}
inline void Trajectory::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning.Trajectory.name)
}
inline ::std::string* Trajectory::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:planning.Trajectory.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Trajectory::release_name() {
  // @@protoc_insertion_point(field_release:planning.Trajectory.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Trajectory::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:planning.Trajectory.name)
}

// repeated .planning.TrajectoryPoint trajectory_points = 2;
inline int Trajectory::trajectory_points_size() const {
  return trajectory_points_.size();
}
inline void Trajectory::clear_trajectory_points() {
  trajectory_points_.Clear();
}
inline ::planning::TrajectoryPoint* Trajectory::mutable_trajectory_points(int index) {
  // @@protoc_insertion_point(field_mutable:planning.Trajectory.trajectory_points)
  return trajectory_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::planning::TrajectoryPoint >*
Trajectory::mutable_trajectory_points() {
  // @@protoc_insertion_point(field_mutable_list:planning.Trajectory.trajectory_points)
  return &trajectory_points_;
}
inline const ::planning::TrajectoryPoint& Trajectory::trajectory_points(int index) const {
  // @@protoc_insertion_point(field_get:planning.Trajectory.trajectory_points)
  return trajectory_points_.Get(index);
}
inline ::planning::TrajectoryPoint* Trajectory::add_trajectory_points() {
  // @@protoc_insertion_point(field_add:planning.Trajectory.trajectory_points)
  return trajectory_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::planning::TrajectoryPoint >&
Trajectory::trajectory_points() const {
  // @@protoc_insertion_point(field_list:planning.Trajectory.trajectory_points)
  return trajectory_points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_planning_2eproto
